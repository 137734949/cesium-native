// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!
#include "FeatureTableJsonHandler.h"

#include "CesiumGltf/FeatureTable.h"

#include <cassert>
#include <string>

using namespace CesiumGltf;

FeatureTableJsonHandler::FeatureTableJsonHandler(
    const ReaderContext& context) noexcept
    : ExtensibleObjectJsonHandler(context),
      _classProperty(),
      _count(),
      _properties(context) {}

void FeatureTableJsonHandler::reset(
    CesiumJsonReader::IJsonHandler* pParentHandler,
    FeatureTable* pObject) {
  ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonReader::IJsonHandler*
FeatureTableJsonHandler::readObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->readObjectKeyFeatureTable(
      FeatureTable::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonReader::IJsonHandler*
FeatureTableJsonHandler::readObjectKeyFeatureTable(
    const std::string& objectType,
    const std::string_view& str,
    FeatureTable& o) {
  using namespace std::string_literals;

  if ("classProperty"s == str)
    return property("classProperty", this->_classProperty, o.classProperty);
  if ("count"s == str)
    return property("count", this->_count, o.count);
  if ("properties"s == str)
    return property("properties", this->_properties, o.properties);

  return this->readObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
