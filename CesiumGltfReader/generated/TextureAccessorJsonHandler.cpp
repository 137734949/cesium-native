// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!
#include "TextureAccessorJsonHandler.h"
#include "CesiumGltf/TextureAccessor.h"

#include <cassert>
#include <string>

using namespace CesiumGltf;

TextureAccessorJsonHandler::TextureAccessorJsonHandler(
    const ReaderContext& context) noexcept
    : ExtensibleObjectJsonHandler(context), _channels(), _texture(context) {}

void TextureAccessorJsonHandler::reset(
    CesiumJsonReader::IJsonHandler* pParentHandler,
    TextureAccessor* pObject) {
  ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonReader::IJsonHandler*
TextureAccessorJsonHandler::readObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->readObjectKeyTextureAccessor(
      TextureAccessor::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonReader::IJsonHandler*
TextureAccessorJsonHandler::readObjectKeyTextureAccessor(
    const std::string& objectType,
    const std::string_view& str,
    TextureAccessor& o) {
  using namespace std::string_literals;

  if ("channels"s == str)
    return property("channels", this->_channels, o.channels);
  if ("texture"s == str)
    return property("texture", this->_texture, o.texture);

  return this->readObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
