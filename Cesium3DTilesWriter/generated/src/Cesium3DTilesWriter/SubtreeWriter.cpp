// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!

#include "SubtreeWriter.h"

#include <Cesium3DTiles/Availability.h>
#include <Cesium3DTiles/Buffer.h>
#include <Cesium3DTiles/BufferView.h>
#include <Cesium3DTiles/Subtree.h>
#include <CesiumJsonWriter/ExtensionWriterContext.h>
#include <CesiumJsonWriter/JsonObjectWriter.h>
#include <CesiumJsonWriter/JsonWriter.h>
#include <CesiumJsonWriter/writeJsonExtensions.h>

namespace Cesium3DTilesWriter {

namespace {

void writeJson(
    const Cesium3DTiles::Subtree& obj,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& context);

void writeJson(
    const Cesium3DTiles::Availability& obj,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& context);

void writeJson(
    const Cesium3DTiles::BufferView& obj,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& context);

void writeJson(
    const Cesium3DTiles::Buffer& obj,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& context);

[[maybe_unused]] void writeJson(
    const std::string& str,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& /* context */) {
  jsonWriter.String(str);
}

[[maybe_unused]] void writeJson(
    double val,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& /* context */) {
  jsonWriter.Double(val);
}

[[maybe_unused]] void writeJson(
    bool val,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& /* context */) {
  jsonWriter.Bool(val);
}

[[maybe_unused]] void writeJson(
    int64_t val,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& /* context */) {
  jsonWriter.Int64(val);
}

[[maybe_unused]] void writeJson(
    int32_t val,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& /* context */) {
  jsonWriter.Int64(val);
}

[[maybe_unused]] void writeJson(
    const CesiumUtility::JsonValue::Object& obj,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& /* context */) {
  jsonWriter.StartObject();
  for (const auto& item : obj) {
    jsonWriter.Key(item.first);
    writeJsonValue(item.second, jsonWriter);
  }
  jsonWriter.EndObject();
}

template <typename T>
[[maybe_unused]] void writeJson(
    const std::vector<T>& list,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& context) {
  jsonWriter.StartArray();
  for (const T& item : list) {
    writeJson(item, jsonWriter, context);
  }
  jsonWriter.EndArray();
}

template <typename T>
[[maybe_unused]] void writeJson(
    const std::optional<T>& val,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& context) {
  if (val.has_value()) {
    writeJson(*val, jsonWriter, context);
  } else {
    jsonWriter.Null();
  }
}

template <typename T>
[[maybe_unused]] void writeJson(
    const std::map<std::string, T>& obj,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& context) {
  jsonWriter.StartObject();
  for (const auto& item : obj) {
    jsonWriter.Key(item.first);
    writeJson(item.second, jsonWriter, context);
  }
  jsonWriter.EndObject();
}

void writeJson(
    const Cesium3DTiles::Subtree& obj,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& context) {
  jsonWriter.StartObject();

  if (!obj.buffers.empty()) {
    jsonWriter.Key("buffers");
    writeJson(obj.buffers, jsonWriter, context);
  }

  if (!obj.bufferViews.empty()) {
    jsonWriter.Key("bufferViews");
    writeJson(obj.bufferViews, jsonWriter, context);
  }

  jsonWriter.Key("tileAvailability");
  writeJson(obj.tileAvailability, jsonWriter, context);

  jsonWriter.Key("childSubtreeAvailability");
  writeJson(obj.childSubtreeAvailability, jsonWriter, context);

  if (obj.contentAvailability.has_value()) {
    jsonWriter.Key("contentAvailability");
    writeJson(obj.contentAvailability, jsonWriter, context);
  }

  if (!obj.extensions.empty()) {
    jsonWriter.Key("extensions");
    writeJsonExtensions(obj, jsonWriter, context);
  }

  if (!obj.extras.empty()) {
    jsonWriter.Key("extras");
    writeJson(obj.extras, jsonWriter, context);
  }

  jsonWriter.EndObject();
}

void writeJson(
    const Cesium3DTiles::Availability& obj,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& context) {
  jsonWriter.StartObject();

  if (obj.bufferView.has_value()) {
    jsonWriter.Key("bufferView");
    writeJson(obj.bufferView, jsonWriter, context);
  }

  if (obj.availableCount.has_value()) {
    jsonWriter.Key("availableCount");
    writeJson(obj.availableCount, jsonWriter, context);
  }

  if (obj.constant.has_value()) {
    jsonWriter.Key("constant");
    writeJson(obj.constant, jsonWriter, context);
  }

  if (!obj.extensions.empty()) {
    jsonWriter.Key("extensions");
    writeJsonExtensions(obj, jsonWriter, context);
  }

  if (!obj.extras.empty()) {
    jsonWriter.Key("extras");
    writeJson(obj.extras, jsonWriter, context);
  }

  jsonWriter.EndObject();
}

void writeJson(
    const Cesium3DTiles::BufferView& obj,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& context) {
  jsonWriter.StartObject();

  jsonWriter.Key("buffer");
  writeJson(obj.buffer, jsonWriter, context);

  jsonWriter.Key("byteOffset");
  writeJson(obj.byteOffset, jsonWriter, context);

  jsonWriter.Key("byteLength");
  writeJson(obj.byteLength, jsonWriter, context);

  if (obj.name.has_value()) {
    jsonWriter.Key("name");
    writeJson(obj.name, jsonWriter, context);
  }

  if (!obj.extensions.empty()) {
    jsonWriter.Key("extensions");
    writeJsonExtensions(obj, jsonWriter, context);
  }

  if (!obj.extras.empty()) {
    jsonWriter.Key("extras");
    writeJson(obj.extras, jsonWriter, context);
  }

  jsonWriter.EndObject();
}

void writeJson(
    const Cesium3DTiles::Buffer& obj,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& context) {
  jsonWriter.StartObject();

  if (obj.uri.has_value()) {
    jsonWriter.Key("uri");
    writeJson(obj.uri, jsonWriter, context);
  }

  jsonWriter.Key("byteLength");
  writeJson(obj.byteLength, jsonWriter, context);

  if (obj.name.has_value()) {
    jsonWriter.Key("name");
    writeJson(obj.name, jsonWriter, context);
  }

  if (!obj.extensions.empty()) {
    jsonWriter.Key("extensions");
    writeJsonExtensions(obj, jsonWriter, context);
  }

  if (!obj.extras.empty()) {
    jsonWriter.Key("extras");
    writeJson(obj.extras, jsonWriter, context);
  }

  jsonWriter.EndObject();
}

} // namespace

void SubtreeWriter::write(
    const Cesium3DTiles::Subtree& obj,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& context) {
  writeJson(obj, jsonWriter, context);
}

void SubtreeWriter::populateExtensions(
    CesiumJsonWriter::ExtensionWriterContext& context) {
  (void)context;
}

void AvailabilityWriter::write(
    const Cesium3DTiles::Availability& obj,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& context) {
  writeJson(obj, jsonWriter, context);
}

void AvailabilityWriter::populateExtensions(
    CesiumJsonWriter::ExtensionWriterContext& context) {
  (void)context;
}

void BufferViewWriter::write(
    const Cesium3DTiles::BufferView& obj,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& context) {
  writeJson(obj, jsonWriter, context);
}

void BufferViewWriter::populateExtensions(
    CesiumJsonWriter::ExtensionWriterContext& context) {
  (void)context;
}

void BufferWriter::write(
    const Cesium3DTiles::Buffer& obj,
    CesiumJsonWriter::JsonWriter& jsonWriter,
    const CesiumJsonWriter::ExtensionWriterContext& context) {
  writeJson(obj, jsonWriter, context);
}

void BufferWriter::populateExtensions(
    CesiumJsonWriter::ExtensionWriterContext& context) {
  (void)context;
}

} // namespace Cesium3DTilesWriter
