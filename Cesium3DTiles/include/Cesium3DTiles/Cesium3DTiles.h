// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include "Library.h"

#include <CesiumUtility/ExtensibleObject.h>
#include <optional>
#include <string>
#include <unordered_map>
#include <vector>

#define CODEGEN_API CESIUM3DTILES_API

namespace Cesium3DTiles {

struct CODEGEN_API Asset : public CesiumUtility::ExtensibleObject {
  static inline constexpr const char* TypeName = "Asset";

  Asset() = default;

  std::string version;

  std::optional<std::string> tilesetVersion;
};

struct CODEGEN_API BoundingVolume : public CesiumUtility::ExtensibleObject {
  static inline constexpr const char* TypeName = "BoundingVolume";

  BoundingVolume() = default;

  std::optional<std::vector<double>> box;

  std::optional<std::vector<double>> region;

  std::optional<std::vector<double>> sphere;
};

struct CODEGEN_API TileContent : public CesiumUtility::ExtensibleObject {
  static inline constexpr const char* TypeName = "TileContent";

  TileContent() = default;

  std::optional<BoundingVolume> boundingVolume;

  std::string uri;
};

struct CODEGEN_API Tile : public CesiumUtility::ExtensibleObject {
  static inline constexpr const char* TypeName = "Tile";

  enum class Refine { ADD, REPLACE };

  Tile() = default;

  BoundingVolume boundingVolume;

  std::optional<BoundingVolume> viewerRequestVolume;

  double geometricError;

  std::optional<Refine> refine;

  std::vector<double> transform =
      {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1};

  std::optional<TileContent> content;

  std::optional<std::vector<Tile>> children;
};

struct CODEGEN_API TilesetProperties : public CesiumUtility::ExtensibleObject {
  static inline constexpr const char* TypeName = "TilesetProperties";

  TilesetProperties() = default;

  double maximum;

  double minimum;
};

struct CODEGEN_API Tileset : public CesiumUtility::ExtensibleObject {
  static inline constexpr const char* TypeName = "Tileset";

  struct CODEGEN_API Properties : public CesiumUtility::ExtensibleObject {
    static inline constexpr const char* TypeName = "Properties";

    Properties() = default;

    std::unordered_map<std::string, TilesetProperties> additionalProperties;
  };

  Tileset() = default;

  Asset asset;

  std::optional<Properties> properties;

  double geometricError;

  Tile root;

  std::optional<std::vector<std::string>> extensionsUsed;

  std::optional<std::vector<std::string>> extensionsRequired;
};

struct CODEGEN_API FeatureTable : public CesiumUtility::ExtensibleObject {
  static inline constexpr const char* TypeName = "FeatureTable";

  struct CODEGEN_API BinaryBodyReference
      : public CesiumUtility::ExtensibleObject {
    static inline constexpr const char* TypeName = "BinaryBodyReference";

    enum class ComponentType {
      BYTE,
      UNSIGNED_BYTE,
      SHORT,
      UNSIGNED_SHORT,
      INT,
      UNSIGNED_INT,
      FLOAT,
      DOUBLE
    };

    BinaryBodyReference() = default;

    int64_t byteOffset;

    std::optional<ComponentType> componentType;
  };

  struct CODEGEN_API Property {};

  struct CODEGEN_API GlobalPropertyScalar {
    struct CODEGEN_API Variant0 : public CesiumUtility::ExtensibleObject {
      static inline constexpr const char* TypeName = "Variant0";

      Variant0() = default;

      int64_t byteOffset;
    };
  };

  struct CODEGEN_API GlobalPropertyCartesian3 {
    struct CODEGEN_API Variant0 : public CesiumUtility::ExtensibleObject {
      static inline constexpr const char* TypeName = "Variant0";

      Variant0() = default;

      int64_t byteOffset;
    };
  };

  struct CODEGEN_API GlobalPropertyCartesian4 {
    struct CODEGEN_API Variant0 : public CesiumUtility::ExtensibleObject {
      static inline constexpr const char* TypeName = "Variant0";

      Variant0() = default;

      int64_t byteOffset;
    };
  };

  FeatureTable() = default;

  std::unordered_map<
      std::string,
      std::variant<
          FeatureTable::BinaryBodyReference,
          std::vector<double>,
          double>>
      additionalProperties;
};

struct CODEGEN_API PntsFeatureTable : public FeatureTable {
  static inline constexpr const char* TypeName = "PntsFeatureTable";

  PntsFeatureTable() = default;

  std::optional<FeatureTable::BinaryBodyReference> POSITION;

  std::optional<FeatureTable::BinaryBodyReference> POSITION_QUANTIZED =
      std::nullopt;

  std::optional<FeatureTable::BinaryBodyReference> RGBA;

  std::optional<FeatureTable::BinaryBodyReference> RGB;

  std::optional<FeatureTable::BinaryBodyReference> RGB565;

  std::optional<FeatureTable::BinaryBodyReference> NORMAL;

  std::optional<FeatureTable::BinaryBodyReference> NORMAL_OCT16P;

  std::optional<FeatureTable::BinaryBodyReference> BATCH_ID;

  std::optional<std::variant<
      FeatureTable::GlobalPropertyScalar::Variant0,
      std::vector<double>,
      double>>
      POINTS_LENGTH;

  std::optional<std::variant<
      FeatureTable::GlobalPropertyCartesian3::Variant0,
      std::vector<double>>>
      RTC_CENTER;

  std::optional<std::variant<
      FeatureTable::GlobalPropertyCartesian3::Variant0,
      std::vector<double>>>
      QUANTIZED_VOLUME_OFFSET;

  std::optional<std::variant<
      FeatureTable::GlobalPropertyCartesian3::Variant0,
      std::vector<double>>>
      QUANTIZED_VOLUME_SCALE;

  std::optional<std::variant<
      FeatureTable::GlobalPropertyCartesian4::Variant0,
      std::vector<double>>>
      CONSTANT_RGBA;

  std::optional<std::variant<
      FeatureTable::GlobalPropertyScalar::Variant0,
      std::vector<double>,
      double>>
      BATCH_LENGTH;
};

} // namespace Cesium3DTiles

#undef CODEGEN_API
