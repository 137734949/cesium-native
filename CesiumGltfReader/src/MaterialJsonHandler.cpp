// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!
#include "MaterialJsonHandler.h"
#include "CesiumGltf/Material.h"
#include <cassert>
#include <string>

using namespace CesiumGltf;

void MaterialJsonHandler::reset(JsonHandler* pParent, Material* pObject) {
  NamedObjectJsonHandler::reset(pParent);
  this->_pObject = pObject;
}

JsonHandler* MaterialJsonHandler::Key(const char* str, size_t /*length*/, bool /*copy*/) {
  using namespace std::string_literals;

  assert(this->_pObject);

  if ("pbrMetallicRoughness"s == str) return property(this->_pbrMetallicRoughness, this->_pObject->pbrMetallicRoughness);
  if ("normalTexture"s == str) return property(this->_normalTexture, this->_pObject->normalTexture);
  if ("occlusionTexture"s == str) return property(this->_occlusionTexture, this->_pObject->occlusionTexture);
  if ("emissiveTexture"s == str) return property(this->_emissiveTexture, this->_pObject->emissiveTexture);
  if ("emissiveFactor"s == str) return property(this->_emissiveFactor, this->_pObject->emissiveFactor);
  if ("alphaMode"s == str) return property(this->_alphaMode, this->_pObject->alphaMode);
  if ("alphaCutoff"s == str) return property(this->_alphaCutoff, this->_pObject->alphaCutoff);
  if ("doubleSided"s == str) return property(this->_doubleSided, this->_pObject->doubleSided);

  return this->NamedObjectKey(str, *this->_pObject);
}

void MaterialJsonHandler::AlphaModeJsonHandler::reset(JsonHandler* pParent, Material::AlphaMode* pEnum) {
  JsonHandler::reset(pParent);
  this->_pEnum = pEnum;
}

JsonHandler* MaterialJsonHandler::AlphaModeJsonHandler::String(const char* str, size_t /*length*/, bool /*copy*/) {
  using namespace std::string_literals;

  assert(this->_pEnum);

  if ("OPAQUE"s == str) *this->_pEnum = Material::AlphaMode::OPAQUE;
  else if ("MASK"s == str) *this->_pEnum = Material::AlphaMode::MASK;
  else if ("BLEND"s == str) *this->_pEnum = Material::AlphaMode::BLEND;
  else return nullptr;

  return this->parent();
}
