// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!
#include "BufferViewJsonHandler.h"
#include "CesiumGltf/BufferView.h"
#include <cassert>
#include <string>

using namespace CesiumGltf;

void BufferViewJsonHandler::reset(IJsonHandler* pParent, BufferView* pObject) {
  NamedObjectJsonHandler::reset(pParent);
  this->_pObject = pObject;
}

BufferView* BufferViewJsonHandler::getObject() {
  return this->_pObject;
}

void BufferViewJsonHandler::reportWarning(const std::string& warning, std::vector<std::string>&& context) {
  if (this->getCurrentKey()) {
    context.emplace_back(std::string(".") + this->getCurrentKey());
  }
  this->parent()->reportWarning(warning, std::move(context));
}

IJsonHandler* BufferViewJsonHandler::Key(const char* str, size_t /*length*/, bool /*copy*/) {
  using namespace std::string_literals;

  assert(this->_pObject);

  if ("buffer"s == str) return property("buffer", this->_buffer, this->_pObject->buffer);
  if ("byteOffset"s == str) return property("byteOffset", this->_byteOffset, this->_pObject->byteOffset);
  if ("byteLength"s == str) return property("byteLength", this->_byteLength, this->_pObject->byteLength);
  if ("byteStride"s == str) return property("byteStride", this->_byteStride, this->_pObject->byteStride);
  if ("target"s == str) return property("target", this->_target, this->_pObject->target);

  return this->NamedObjectKey(str, *this->_pObject);
}
