// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!
#include "AnimationSamplerJsonHandler.h"
#include "CesiumGltf/AnimationSampler.h"
#include <cassert>
#include <string>

using namespace CesiumGltf;

void AnimationSamplerJsonHandler::reset(JsonHandler* pParent, AnimationSampler* pObject) {
  ExtensibleObjectJsonHandler::reset(pParent);
  this->_pObject = pObject;
}

JsonHandler* AnimationSamplerJsonHandler::Key(const char* str, size_t /*length*/, bool /*copy*/) {
  using namespace std::string_literals;

  assert(this->_pObject);

  if ("input"s == str) return property(this->_input, this->_pObject->input);
  if ("interpolation"s == str) return property(this->_interpolation, this->_pObject->interpolation);
  if ("output"s == str) return property(this->_output, this->_pObject->output);

  return this->ExtensibleObjectKey(str, *this->_pObject);
}

void AnimationSamplerJsonHandler::InterpolationJsonHandler::reset(JsonHandler* pParent, AnimationSampler::Interpolation* pEnum) {
  JsonHandler::reset(pParent);
  this->_pEnum = pEnum;
}

JsonHandler* AnimationSamplerJsonHandler::InterpolationJsonHandler::String(const char* str, size_t /*length*/, bool /*copy*/) {
  using namespace std::string_literals;

  assert(this->_pEnum);

  if ("LINEAR"s == str) *this->_pEnum = AnimationSampler::Interpolation::LINEAR;
  else if ("STEP"s == str) *this->_pEnum = AnimationSampler::Interpolation::STEP;
  else if ("CUBICSPLINE"s == str) *this->_pEnum = AnimationSampler::Interpolation::CUBICSPLINE;
  else return nullptr;

  return this->parent();
}
