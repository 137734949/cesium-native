// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!
#include "MeshPrimitiveJsonHandler.h"
#include "CesiumGltf/KHR_draco_mesh_compression.h"
#include "CesiumGltf/MeshPrimitive.h"
#include <cassert>
#include <string>

using namespace CesiumGltf;

MeshPrimitiveJsonHandler::MeshPrimitiveJsonHandler(
    const ReadModelOptions& options) noexcept
    : ExtensibleObjectJsonHandler(options),
      _attributes(options),
      _indices(options),
      _material(options),
      _mode(options),
      _targets(options),
      _extensions(options) {}

void MeshPrimitiveJsonHandler::reset(
    IJsonHandler* pParent,
    MeshPrimitive* pObject) {
  ExtensibleObjectJsonHandler::reset(pParent, pObject);
  this->_pObject = pObject;
}

MeshPrimitive* MeshPrimitiveJsonHandler::getObject() { return this->_pObject; }

void MeshPrimitiveJsonHandler::reportWarning(
    const std::string& warning,
    std::vector<std::string>&& context) {
  if (this->getCurrentKey()) {
    context.emplace_back(std::string(".") + this->getCurrentKey());
  }
  this->parent()->reportWarning(warning, std::move(context));
}

IJsonHandler* MeshPrimitiveJsonHandler::Key(
    const char* str,
    size_t /*length*/,
    bool /*copy*/) {
  assert(this->_pObject);
  return this->MeshPrimitiveKey(str, *this->_pObject);
}

IJsonHandler*
MeshPrimitiveJsonHandler::MeshPrimitiveKey(const char* str, MeshPrimitive& o) {
  using namespace std::string_literals;

  if ("attributes"s == str)
    return property("attributes", this->_attributes, o.attributes);
  if ("indices"s == str)
    return property("indices", this->_indices, o.indices);
  if ("material"s == str)
    return property("material", this->_material, o.material);
  if ("mode"s == str)
    return property("mode", this->_mode, o.mode);
  if ("targets"s == str)
    return property("targets", this->_targets, o.targets);
  if ("extensions"s == str)
    return property("extensions", this->_extensions, o.extensions);

  return this->ExtensibleObjectKey(str, *this->_pObject);
}

void MeshPrimitiveJsonHandler::ExtensionsJsonHandler::reset(
    IJsonHandler* pParent,
    std::vector<std::any>* pExtensions) {
  ObjectJsonHandler::reset(pParent);
  this->_pExtensions = pExtensions;
}

IJsonHandler* MeshPrimitiveJsonHandler::ExtensionsJsonHandler::Key(
    const char* str,
    size_t /* length */,
    bool /* copy */) {
  using namespace std::string_literals;

  if ("KHR_draco_mesh_compression"s == str)
    return property(
        "KHR_draco_mesh_compression",
        this->_KHR_draco_mesh_compression,
        std::any_cast<KHR_draco_mesh_compression&>(
            this->_pExtensions->emplace_back(KHR_draco_mesh_compression())));

  return this->ignoreAndContinue();
}
