// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!
#include "CameraPerspectiveJsonHandler.h"
#include "CesiumGltf/CameraPerspective.h"
#include <cassert>
#include <string>

using namespace CesiumGltf;

void CameraPerspectiveJsonHandler::reset(IJsonHandler* pParent, CameraPerspective* pObject) {
  ExtensibleObjectJsonHandler::reset(pParent);
  this->_pObject = pObject;
}

CameraPerspective* CameraPerspectiveJsonHandler::getObject() {
  return this->_pObject;
}

void CameraPerspectiveJsonHandler::reportWarning(const std::string& warning, std::vector<std::string>&& context) {
  if (this->getCurrentKey()) {
    context.emplace_back(std::string(".") + this->getCurrentKey());
  }
  this->parent()->reportWarning(warning, std::move(context));
}

IJsonHandler* CameraPerspectiveJsonHandler::Key(const char* str, size_t /*length*/, bool /*copy*/) {
  using namespace std::string_literals;

  assert(this->_pObject);

  if ("aspectRatio"s == str) return property("aspectRatio", this->_aspectRatio, this->_pObject->aspectRatio);
  if ("yfov"s == str) return property("yfov", this->_yfov, this->_pObject->yfov);
  if ("zfar"s == str) return property("zfar", this->_zfar, this->_pObject->zfar);
  if ("znear"s == str) return property("znear", this->_znear, this->_pObject->znear);

  return this->ExtensibleObjectKey(str, *this->_pObject);
}
