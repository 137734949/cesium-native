// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!
#include "ImageJsonHandler.h"
#include "CesiumGltf/Image.h"

#include <cassert>
#include <string>

using namespace CesiumGltf;

ImageJsonHandler::ImageJsonHandler(const ReadModelOptions& options) noexcept
    : NamedObjectJsonHandler(options),
      _uri(options),
      _mimeType(options),
      _bufferView(options) {}

void ImageJsonHandler::reset(IJsonHandler* pParent, Image* pObject) {
  NamedObjectJsonHandler::reset(pParent, pObject);
  this->_pObject = pObject;
}

Image* ImageJsonHandler::getObject() { return this->_pObject; }

void ImageJsonHandler::reportWarning(
    const std::string& warning,
    std::vector<std::string>&& context) {
  if (this->getCurrentKey()) {
    context.emplace_back(std::string(".") + this->getCurrentKey());
  }
  this->parent()->reportWarning(warning, std::move(context));
}

IJsonHandler* ImageJsonHandler::readObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->ImageKey(Image::TypeName, str, *this->_pObject);
}

IJsonHandler* ImageJsonHandler::ImageKey(
    const std::string& objectType,
    const std::string_view& str,
    Image& o) {
  using namespace std::string_literals;

  if ("uri"s == str)
    return property("uri", this->_uri, o.uri);
  if ("mimeType"s == str)
    return property("mimeType", this->_mimeType, o.mimeType);
  if ("bufferView"s == str)
    return property("bufferView", this->_bufferView, o.bufferView);

  return this->NamedObjectKey(objectType, str, *this->_pObject);
}

void ImageJsonHandler::MimeTypeJsonHandler::reset(
    IJsonHandler* pParent,
    Image::MimeType* pEnum) {
  JsonHandler::reset(pParent);
  this->_pEnum = pEnum;
}

IJsonHandler*
ImageJsonHandler::MimeTypeJsonHandler::readString(const std::string_view& str) {
  using namespace std::string_literals;

  assert(this->_pEnum);

  if ("image/jpeg"s == str)
    *this->_pEnum = Image::MimeType::image_jpeg;
  else if ("image/png"s == str)
    *this->_pEnum = Image::MimeType::image_png;
  else
    return nullptr;

  return this->parent();
}
