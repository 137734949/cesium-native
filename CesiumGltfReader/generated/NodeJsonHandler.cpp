// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!
#include "NodeJsonHandler.h"
#include "CesiumGltf/Node.h"

#include <cassert>
#include <string>

using namespace CesiumGltf;

NodeJsonHandler::NodeJsonHandler(const ReaderContext& context) noexcept
    : NamedObjectJsonHandler(context),
      _camera(context),
      _children(context),
      _skin(context),
      _matrix(context),
      _mesh(context),
      _rotation(context),
      _scale(context),
      _translation(context),
      _weights(context) {}

void NodeJsonHandler::reset(IJsonReader* pParent, Node* pObject) {
  NamedObjectJsonHandler::reset(pParent, pObject);
  this->_pObject = pObject;
}

Node* NodeJsonHandler::getObject() { return this->_pObject; }

void NodeJsonHandler::reportWarning(
    const std::string& warning,
    std::vector<std::string>&& context) {
  if (this->getCurrentKey()) {
    context.emplace_back(std::string(".") + this->getCurrentKey());
  }
  this->parent()->reportWarning(warning, std::move(context));
}

IJsonReader* NodeJsonHandler::readObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->readObjectKeyNode(Node::TypeName, str, *this->_pObject);
}

IJsonReader* NodeJsonHandler::readObjectKeyNode(
    const std::string& objectType,
    const std::string_view& str,
    Node& o) {
  using namespace std::string_literals;

  if ("camera"s == str)
    return property("camera", this->_camera, o.camera);
  if ("children"s == str)
    return property("children", this->_children, o.children);
  if ("skin"s == str)
    return property("skin", this->_skin, o.skin);
  if ("matrix"s == str)
    return property("matrix", this->_matrix, o.matrix);
  if ("mesh"s == str)
    return property("mesh", this->_mesh, o.mesh);
  if ("rotation"s == str)
    return property("rotation", this->_rotation, o.rotation);
  if ("scale"s == str)
    return property("scale", this->_scale, o.scale);
  if ("translation"s == str)
    return property("translation", this->_translation, o.translation);
  if ("weights"s == str)
    return property("weights", this->_weights, o.weights);

  return this->readObjectKeyNamedObject(objectType, str, *this->_pObject);
}
