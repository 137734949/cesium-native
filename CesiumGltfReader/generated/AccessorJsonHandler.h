// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include "AccessorSparseJsonHandler.h"
#include "ArrayJsonHandler.h"
#include "BoolJsonHandler.h"
#include "CesiumGltf/Accessor.h"
#include "DoubleJsonHandler.h"
#include "IntegerJsonHandler.h"
#include "NamedObjectJsonHandler.h"
#include <CesiumGltf/Reader.h>

namespace CesiumGltf {
struct Accessor;

class AccessorJsonHandler : public NamedObjectJsonHandler {
public:
  AccessorJsonHandler(const ReadModelOptions& options) noexcept;
  void reset(IJsonHandler* pHandler, Accessor* pObject);
  Accessor* getObject();
  virtual void reportWarning(
      const std::string& warning,
      std::vector<std::string>&& context = std::vector<std::string>()) override;

  virtual IJsonHandler*
  readObjectKey(const char* str, size_t length, bool copy) override;

protected:
  IJsonHandler*
  AccessorKey(const std::string& objectType, const char* str, Accessor& o);

private:
  class TypeJsonHandler : public JsonHandler {
  public:
    TypeJsonHandler(const ReadModelOptions& options) noexcept
        : JsonHandler(options) {}
    void reset(IJsonHandler* pParent, Accessor::Type* pEnum);
    virtual IJsonHandler*
    readString(const char* str, size_t length, bool copy) override;

  private:
    Accessor::Type* _pEnum = nullptr;
  };

  Accessor* _pObject = nullptr;
  IntegerJsonHandler<int32_t> _bufferView;
  IntegerJsonHandler<int64_t> _byteOffset;
  IntegerJsonHandler<Accessor::ComponentType> _componentType;
  BoolJsonHandler _normalized;
  IntegerJsonHandler<int64_t> _count;
  TypeJsonHandler _type;
  ArrayJsonHandler<double, DoubleJsonHandler> _max;
  ArrayJsonHandler<double, DoubleJsonHandler> _min;
  AccessorSparseJsonHandler _sparse;
};
} // namespace CesiumGltf
