// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include "PropertyTablePropertyJsonHandler.h"

#include <CesiumGltf/PropertyTable.h>
#include <CesiumJsonReader/DictionaryJsonHandler.h>
#include <CesiumJsonReader/ExtensibleObjectJsonHandler.h>
#include <CesiumJsonReader/IntegerJsonHandler.h>
#include <CesiumJsonReader/StringJsonHandler.h>

namespace CesiumJsonReader {
class ExtensionReaderContext;
}

namespace CesiumGltf {
class PropertyTableJsonHandler
    : public CesiumJsonReader::ExtensibleObjectJsonHandler {
public:
  using ValueType = PropertyTable;

  PropertyTableJsonHandler(
      const CesiumJsonReader::ExtensionReaderContext& context) noexcept;
  void reset(IJsonHandler* pParentHandler, PropertyTable* pObject);

  virtual IJsonHandler* readObjectKey(const std::string_view& str) override;

protected:
  IJsonHandler* readObjectKeyPropertyTable(
      const std::string& objectType,
      const std::string_view& str,
      PropertyTable& o);

private:
  PropertyTable* _pObject = nullptr;
  CesiumJsonReader::StringJsonHandler _name;
  CesiumJsonReader::StringJsonHandler _classProperty;
  CesiumJsonReader::IntegerJsonHandler<int64_t> _count;
  CesiumJsonReader::DictionaryJsonHandler<
      PropertyTableProperty,
      PropertyTablePropertyJsonHandler>
      _properties;
};
} // namespace CesiumGltf
