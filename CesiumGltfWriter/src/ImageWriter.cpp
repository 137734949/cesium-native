#include "ExtensionWriter.h"
#include "JsonObjectWriter.h"
#include "ImageWriter.h"
#include <magic_enum.hpp>
#include <algorithm>

void CesiumGltf::writeImage(
    const std::vector<CesiumGltf::Image>& images,
    CesiumGltf::JsonWriter& jsonWriter
) {
    if (images.empty()) {
        return;
    }

    auto& j = jsonWriter;
    j.Key("images");
    j.StartArray();

    for (const auto& image : images) {
        j.StartObject();

        if (image.uri) {
            j.KeyPrimitive("uri", *image.uri);
        }

        if (image.mimeType) {
            j.Key("mimeType");
            // TODO: Terrible hack. Automagically converts XXX_XXX to XXX/XXX
            //       The autogenerated class should provide a enum to string.
            //       function to avoid this.
            auto mimeType = std::string(magic_enum::enum_name(*image.mimeType));
            std::replace(mimeType.begin(), mimeType.end(), '_', '/');
            j.String(mimeType.c_str());
        }

        if (image.bufferView >= 0) {
            j.KeyPrimitive("bufferView", image.bufferView);
        }

        if (!image.name.empty()) {
            j.KeyPrimitive("name", image.name);
        }
        
        if (!image.extensions.empty()) {
            writeExtensions(image.extensions, j);
        }

        if (!image.extras.empty()) {
            j.Key("extras");
            writeJsonValue(image.extras, j);
        }

        j.EndObject();
    }

    j.EndArray();
}
