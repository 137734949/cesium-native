// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!
#include "ModelJsonHandler.h"
#include "CesiumGltf/Model.h"
#include <cassert>
#include <string>

using namespace CesiumGltf;

void ModelJsonHandler::reset(IJsonHandler* pParent, Model* pObject) {
  ExtensibleObjectJsonHandler::reset(pParent);
  this->_pObject = pObject;
}

Model* ModelJsonHandler::getObject() {
  return this->_pObject;
}

void ModelJsonHandler::reportWarning(const std::string& warning, std::vector<std::string>&& context) {
  if (this->getCurrentKey()) {
    context.emplace_back(std::string(".") + this->getCurrentKey());
  }
  this->parent()->reportWarning(warning, std::move(context));
}

IJsonHandler* ModelJsonHandler::Key(const char* str, size_t /*length*/, bool /*copy*/) {
  using namespace std::string_literals;

  assert(this->_pObject);

  if ("extensionsUsed"s == str) return property("extensionsUsed", this->_extensionsUsed, this->_pObject->extensionsUsed);
  if ("extensionsRequired"s == str) return property("extensionsRequired", this->_extensionsRequired, this->_pObject->extensionsRequired);
  if ("accessors"s == str) return property("accessors", this->_accessors, this->_pObject->accessors);
  if ("animations"s == str) return property("animations", this->_animations, this->_pObject->animations);
  if ("asset"s == str) return property("asset", this->_asset, this->_pObject->asset);
  if ("buffers"s == str) return property("buffers", this->_buffers, this->_pObject->buffers);
  if ("bufferViews"s == str) return property("bufferViews", this->_bufferViews, this->_pObject->bufferViews);
  if ("cameras"s == str) return property("cameras", this->_cameras, this->_pObject->cameras);
  if ("images"s == str) return property("images", this->_images, this->_pObject->images);
  if ("materials"s == str) return property("materials", this->_materials, this->_pObject->materials);
  if ("meshes"s == str) return property("meshes", this->_meshes, this->_pObject->meshes);
  if ("nodes"s == str) return property("nodes", this->_nodes, this->_pObject->nodes);
  if ("samplers"s == str) return property("samplers", this->_samplers, this->_pObject->samplers);
  if ("scene"s == str) return property("scene", this->_scene, this->_pObject->scene);
  if ("scenes"s == str) return property("scenes", this->_scenes, this->_pObject->scenes);
  if ("skins"s == str) return property("skins", this->_skins, this->_pObject->skins);
  if ("textures"s == str) return property("textures", this->_textures, this->_pObject->textures);

  return this->ExtensibleObjectKey(str, *this->_pObject);
}
