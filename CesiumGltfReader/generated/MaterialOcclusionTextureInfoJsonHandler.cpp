// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!
#include "MaterialOcclusionTextureInfoJsonHandler.h"
#include "CesiumGltf/MaterialOcclusionTextureInfo.h"

#include <cassert>
#include <string>

using namespace CesiumGltf;

MaterialOcclusionTextureInfoJsonHandler::
    MaterialOcclusionTextureInfoJsonHandler(
        const JsonReaderContext& context) noexcept
    : TextureInfoJsonHandler(context), _strength(context) {}

void MaterialOcclusionTextureInfoJsonHandler::reset(
    IJsonHandler* pParent,
    MaterialOcclusionTextureInfo* pObject) {
  TextureInfoJsonHandler::reset(pParent, pObject);
  this->_pObject = pObject;
}

MaterialOcclusionTextureInfo*
MaterialOcclusionTextureInfoJsonHandler::getObject() {
  return this->_pObject;
}

void MaterialOcclusionTextureInfoJsonHandler::reportWarning(
    const std::string& warning,
    std::vector<std::string>&& context) {
  if (this->getCurrentKey()) {
    context.emplace_back(std::string(".") + this->getCurrentKey());
  }
  this->parent()->reportWarning(warning, std::move(context));
}

IJsonHandler* MaterialOcclusionTextureInfoJsonHandler::readObjectKey(
    const std::string_view& str) {
  assert(this->_pObject);
  return this->MaterialOcclusionTextureInfoKey(
      MaterialOcclusionTextureInfo::TypeName,
      str,
      *this->_pObject);
}

IJsonHandler*
MaterialOcclusionTextureInfoJsonHandler::MaterialOcclusionTextureInfoKey(
    const std::string& objectType,
    const std::string_view& str,
    MaterialOcclusionTextureInfo& o) {
  using namespace std::string_literals;

  if ("strength"s == str)
    return property("strength", this->_strength, o.strength);

  return this->TextureInfoKey(objectType, str, *this->_pObject);
}
