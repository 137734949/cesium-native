// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!
#include "AccessorJsonHandler.h"
#include "CesiumGltf/Accessor.h"
#include <cassert>
#include <string>

using namespace CesiumGltf;

void AccessorJsonHandler::reset(IJsonHandler* pParent, Accessor* pObject) {
  NamedObjectJsonHandler::reset(pParent);
  this->_pObject = pObject;
}

Accessor* AccessorJsonHandler::getObject() {
  return this->_pObject;
}

void AccessorJsonHandler::reportWarning(const std::string& warning, std::vector<std::string>&& context) {
  if (this->getCurrentKey()) {
    context.emplace_back(std::string(".") + this->getCurrentKey());
  }
  this->parent()->reportWarning(warning, std::move(context));
}

IJsonHandler* AccessorJsonHandler::Key(const char* str, size_t /*length*/, bool /*copy*/) {
  using namespace std::string_literals;

  assert(this->_pObject);

  if ("bufferView"s == str) return property("bufferView", this->_bufferView, this->_pObject->bufferView);
  if ("byteOffset"s == str) return property("byteOffset", this->_byteOffset, this->_pObject->byteOffset);
  if ("componentType"s == str) return property("componentType", this->_componentType, this->_pObject->componentType);
  if ("normalized"s == str) return property("normalized", this->_normalized, this->_pObject->normalized);
  if ("count"s == str) return property("count", this->_count, this->_pObject->count);
  if ("type"s == str) return property("type", this->_type, this->_pObject->type);
  if ("max"s == str) return property("max", this->_max, this->_pObject->max);
  if ("min"s == str) return property("min", this->_min, this->_pObject->min);
  if ("sparse"s == str) return property("sparse", this->_sparse, this->_pObject->sparse);

  return this->NamedObjectKey(str, *this->_pObject);
}

void AccessorJsonHandler::TypeJsonHandler::reset(IJsonHandler* pParent, Accessor::Type* pEnum) {
  JsonHandler::reset(pParent);
  this->_pEnum = pEnum;
}

IJsonHandler* AccessorJsonHandler::TypeJsonHandler::String(const char* str, size_t /*length*/, bool /*copy*/) {
  using namespace std::string_literals;

  assert(this->_pEnum);

  if ("SCALAR"s == str) *this->_pEnum = Accessor::Type::SCALAR;
  else if ("VEC2"s == str) *this->_pEnum = Accessor::Type::VEC2;
  else if ("VEC3"s == str) *this->_pEnum = Accessor::Type::VEC3;
  else if ("VEC4"s == str) *this->_pEnum = Accessor::Type::VEC4;
  else if ("MAT2"s == str) *this->_pEnum = Accessor::Type::MAT2;
  else if ("MAT3"s == str) *this->_pEnum = Accessor::Type::MAT3;
  else if ("MAT4"s == str) *this->_pEnum = Accessor::Type::MAT4;
  else return nullptr;

  return this->parent();
}
