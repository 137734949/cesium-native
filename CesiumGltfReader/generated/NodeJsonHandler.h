// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include "CesiumGltf/Reader.h"
#include "CesiumJsonReader/ArrayJsonHandler.h"
#include "CesiumJsonReader/DoubleJsonHandler.h"
#include "CesiumJsonReader/IntegerJsonHandler.h"
#include "NamedObjectJsonHandler.h"

namespace CesiumGltf {
struct ReaderContext;
struct Node;

class NodeJsonHandler : public NamedObjectJsonHandler {
public:
  NodeJsonHandler(const ReaderContext& context) noexcept;
  void reset(IJsonReader* pParentReader, Node* pObject);
  Node* getObject();
  virtual void reportWarning(
      const std::string& warning,
      std::vector<std::string>&& context = std::vector<std::string>()) override;

  virtual IJsonReader* readObjectKey(const std::string_view& str) override;

protected:
  IJsonReader* readObjectKeyNode(
      const std::string& objectType,
      const std::string_view& str,
      Node& o);

private:
  Node* _pObject = nullptr;
  IntegerJsonHandler<int32_t> _camera;
  ArrayJsonHandler<int32_t, IntegerJsonHandler<int32_t>> _children;
  IntegerJsonHandler<int32_t> _skin;
  ArrayJsonHandler<double, DoubleJsonHandler> _matrix;
  IntegerJsonHandler<int32_t> _mesh;
  ArrayJsonHandler<double, DoubleJsonHandler> _rotation;
  ArrayJsonHandler<double, DoubleJsonHandler> _scale;
  ArrayJsonHandler<double, DoubleJsonHandler> _translation;
  ArrayJsonHandler<double, DoubleJsonHandler> _weights;
};
} // namespace CesiumGltf
