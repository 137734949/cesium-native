// This file was generated by generate-gltf-classes.
// DO NOT EDIT THIS FILE!

{{#each headers}}
#include {{this}}
{{/each}}

#include <CesiumJsonWriter/ExtensionWriterContext.h>
#include <CesiumJsonWriter/JsonWriter.h>
#include <CesiumJsonWriter/ExtensionsWriter.h>

using namespace CesiumJsonWriter;
using namespace CesiumUtility;

namespace {{namespace}} {

namespace {
  [[maybe_unused]]
  void writeJson(bool val, JsonWriter& jsonWriter, const ExtensionWriterContext& /* context */) {
    jsonWriter.Bool(val);
  }

  [[maybe_unused]]
  void writeJson(int64_t val, JsonWriter& jsonWriter, const ExtensionWriterContext& /* context */) {
    jsonWriter.Int64(val);
  }

  [[maybe_unused]]
  void writeJson(double val, JsonWriter& jsonWriter, const ExtensionWriterContext& /* context */) {
    jsonWriter.Double(val);
  }

  [[maybe_unused]]
  void writeJson(const std::string& val, JsonWriter& jsonWriter, const ExtensionWriterContext& /* context */) {
    jsonWriter.String(val);
  }

  template <typename T>
  void writeJson(const std::vector<T>& list, JsonWriter& jsonWriter, const ExtensionWriterContext& context);

  template <typename T>
  void writeJson(const std::optional<T>& list, JsonWriter& jsonWriter, const ExtensionWriterContext& context);

  template <typename T>
  void writeJson(const std::unordered_map<std::string,T>& list, JsonWriter& jsonWriter, const ExtensionWriterContext& context);
}


{{#each root.refs}}
{{> object}}
{{/each}}

namespace {
  template <typename T>
  [[maybe_unused]]
  void writeJson(const std::vector<T>& list, JsonWriter& jsonWriter, const ExtensionWriterContext& context) {
    jsonWriter.StartArray();
    for (const T& item : list) {
      writeJson(item, jsonWriter, context);
    }
    jsonWriter.EndArray();
  }

  template <typename T>
  [[maybe_unused]]
  void writeJson(const std::optional<T>& val, JsonWriter& jsonWriter, const ExtensionWriterContext& context) {
    if (val.has_value()) {
      writeJson(*val, jsonWriter, context);
    } else {
      jsonWriter.Null();
    }
  }

  template <typename T>
  [[maybe_unused]]
  void writeJson(const std::unordered_map<std::string, T>& obj, JsonWriter& jsonWriter, const ExtensionWriterContext& context) {
    for (const auto& item : obj) {
      jsonWriter.Key(item.first);
      writeJson(item.second, jsonWriter, context);
    }
  }
}

} // namespace {{namespace}}
